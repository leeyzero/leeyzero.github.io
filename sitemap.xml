<?xml version="1.0" encoding="UTF-8"?>
<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/how-to-reading/</loc>
    
    <lastmod>2024-10-20T16:03:49.473Z</lastmod>
    
    <date>1602343577000</date>
    <title>如何阅读 | LeeYzero的博客</title>
    
    <desc>这个星期利用上下班时间，读了一下《如何阅读》，书只有200页左右，很快就能读完。之所有写这篇读书笔记，一是实践书中的一些方法，训练自己归纳总结的能力；二是希望自己养成做读书笔记的习惯。以下是自己读完这本书的一些感想，我尝试用三个问题来对整本书进行总结。 为什么要读这本书明确自己的阅读目的非常重要！这可能跟学生时代学习课本知识不同，学习时代学习的课本都是系统化构建好的知识体系，我们没有多少选择。但当</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/makefile-tutorial/</loc>
    
    <lastmod>2024-10-20T16:03:40.177Z</lastmod>
    
    <date>1602344899000</date>
    <title>Makefile简明教程 | LeeYzero的博客</title>
    
    <desc>make是一个自动化构建工具，广泛应用于Unix及其类Unix系统中。make最先应用于编译C语言项目，不仅如此，只要某个文件发生变化就需要重新构建的项目都可以使用make工具进行构建。 Makefile是可以被make解析的特定格式的文本文件。其语法简单，当我们构建一个程序时，其工作原理大致为：make首先解析Makefile，查找构建应用的一系列依赖，并检查每个依赖文件是否过期（是否发生变化）</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/11/20/principal-of-mysql-indexes/</loc>
    
    <lastmod>2024-10-20T16:02:46.521Z</lastmod>
    
    <date>1668918843000</date>
    <title>MySQL索引原理 | LeeYzero的博客</title>
    
    <desc>写在前面MySQL是一款开源的关系型数据库，广泛应用于Web后端的数据存储。索引是MySQL非常重要技术组成部分，深入理解MySQL的索引原理，有助于我们建立高性能的索引以及对索引进行调优。 MySQL支持多种索引类型，如B-Tree索引、哈希索引、全文索引等。索引是在存储引擎中实现的，在实际环境中，应用比较多的是InnoDB存储引擎和MyISAM存储引擎，这两个存储引擎底层都是使用的B-Tree</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/thinking-directui/</loc>
    
    <lastmod>2024-10-20T16:02:30.184Z</lastmod>
    
    <date>1602342716000</date>
    <title>DirectUI的一些思考 | LeeYzero的博客</title>
    
    <desc>对于传统Win32界面编程来讲，微软提供一整套界面标准，比如窗口、按钮、滚动条、列表等。对于每一个窗口（控件也是一个窗口），其能响应的消息和行为都有规范（通过API提供给开发者）。微软这套界面标准是为通用场景下提出的解决方案，能够满足绝大部分需求，但业务场景的多样性，使得开发者们并不满足于这套界面标准。 DirectUI的发展历史 2005年6月，Bjarke Viksoe发布了一篇文章UI: B</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/31/technical-writting-1/</loc>
    
    <lastmod>2024-10-20T16:02:12.563Z</lastmod>
    
    <date>1653961766000</date>
    <title>[译] Google技术写作（一） | LeeYzero的博客</title>
    
    <desc>本文翻译自 Google Technical Writing Courses，是Google推出的技术写作课程，该课程包含两个部分，本文是第一部分。 技术写作（一）：教你如何写出更清晰的技术文档，是学习第二部分的基础。 技术写作（二）：帮助你提升技术沟通技巧。</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/07/12/questions-worth-thinking-about/</loc>
    
    <lastmod>2024-10-20T16:02:09.642Z</lastmod>
    
    <date>1626104150000</date>
    <title>几个值得思考的问题 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/07/27/reading-ddia/</loc>
    
    <lastmod>2024-10-20T16:02:07.041Z</lastmod>
    
    <date>1627356494000</date>
    <title>数据密集型应用 | LeeYzero的博客</title>
    
    <desc>最近断断续续花了一个月时间看了一遍数据密集型应用系统设计，也就是大家所说的DDIA（Designing Data-Intensive Applications）。这是一本一看就停不下来的书，强烈安利做业务系统的同学看看。那这本书到底在讲什么呢？ 数据模型是对现实世界的抽象，可以从微观角度理解为“数据结构”，它是一个应用系统中最重要的部分。数据模型在一定程度上会影响到系统设计人员解决问题的方式。关系</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/06/26/how-to-read-a-book/</loc>
    
    <lastmod>2024-10-20T16:01:56.937Z</lastmod>
    
    <date>1656229725000</date>
    <title>如何阅读一本书 | LeeYzero的博客</title>
    
    <desc>最近读了《如何阅读一本书》，很遗憾自己没有早点读到这本书，同时也庆幸自己现在读到这本书。阅读的目标有两种，一种是为了获取资讯，另一种是为了增进理解。《如何阅读一本书》便是一本教你如何通常阅读以增进理解的实用书籍。 打开你的手机，看看你一周的花在各大手机APP上的时间。抖音、快手、知乎、B站、微信公众号…，这些time killer是不是占用了大量的时间？看起来你每天（被）输入了大量信息，但这些信息</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/04/02/how-to-do-a-code-review/</loc>
    
    <lastmod>2024-10-20T16:01:06.789Z</lastmod>
    
    <date>1617354737000</date>
    <title>如何做Code Review | LeeYzero的博客</title>
    
    <desc>Code Review是保障代码和产品质量的重要手段，但却被绝大部分公司所忽略。本文主要基于Google对Code Review的实践，结合自身的经验谈谈团队中该如何做Code Review。 1. 什么是Code ReviewCode Review是代码评审人（Code Reviewer）对代码提交者（Code Committer）做审查（Review）的过程。 2. 为什么要做Code Rev</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/08/29/gin-tutorial/</loc>
    
    <lastmod>2024-10-20T16:00:40.999Z</lastmod>
    
    <date>1630225406000</date>
    <title>Gin简明教程 | LeeYzero的博客</title>
    
    <desc>Gin是一个用Go语言实现的高性能web框架，其API实现优雅，性能卓越，上手简单，而且比较轻量级，很容易引入到项目中。本文是一篇对Gin框架的学习笔记，不会对Gin框架的用法做面面俱到的，而是对Gin框架做一个整体上的认识与入门。 安装1、首先需要先安装Go，依赖版本为1.13+，执行下面命令安装Gin： 1$ go get -u github.com/gin-gonic/gin 2、在代码中引</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/every-programmer-should-know-about-encoding/</loc>
    
    <lastmod>2024-10-20T15:58:57.629Z</lastmod>
    
    <date>1602342268000</date>
    <title>每个程序员都应该知道的字符编码 | LeeYzero的博客</title>
    
    <desc>很多初级甚至有丰富开发经验的开发者都可能会遇到乱码的问题，对深入理解字符编码的人来说，问题很容易解决。但如果你对字符编码一知半解，这些问题可能会让你抓狂。对一名开发者来讲，不管你使用什么语言，在什么平台上开发，字符编码都是需要掌握的基本技能之一。 我们都知道，计算机只能处理0和1，为了让计算机能够处理我们的信息，就需要对信息进行编码。信息编码是一个很大的主题，本文只涉及计算机字符的编码，包括ASC</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/05/23/dropbox-file-synchronization/</loc>
    
    <lastmod>2024-10-20T15:58:15.513Z</lastmod>
    
    <date>1621781063000</date>
    <title>Dropbox同步原理 | LeeYzero的博客</title>
    
    <desc>文件同步是利用网络将多个电脑或移动设备之间的文件进行同步的网络服务。文件同步的本质是对比网络上两台设备之间的文件变更，然后将文件的不同部分通过网络进行传输，以达到文件同步的目的。本文介绍dropbox的文件同步实现原理。 基本概念文件系统在本地电脑上，一个文件可以用文件路径来标识。但对于dropbox需要支持共享目录，定义了名字空间（namespace）的概念，用于对传统文件系统的抽象。每一个共享</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/cef-windows-source/</loc>
    
    <lastmod>2024-10-20T15:56:42.522Z</lastmod>
    
    <date>1602339669000</date>
    <title>CEF Windows环境源码编译 | LeeYzero的博客</title>
    
    <desc>由于项目需要用到内嵌浏览器，IE内核太依赖于操作系统，对H5的支持也不太好。CEF是基于chromium 项目的内嵌浏览器开源框架，已经应用到了很多产品中，而且有比较健全的论坛和官方支持，是项目的不二选择。由于客户端要运行到Windows XP系统，但Chome浏览器在49版本(对应CEF3版本为2623，以下说的CEF均指CEF3)后不再支持Win7以下系统。CEF二进制发布官网上并未包含262</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/11/01/a-brief-logging-specification/</loc>
    
    <lastmod>2024-10-20T15:55:54.340Z</lastmod>
    
    <date>1667304856000</date>
    <title>极简日志打印规范 | LeeYzero的博客</title>
    
    <desc>背景最近由于组织架构调整，团队引入不少新成员。这些成员来自不同的团队和背景，每个人的日志打印风格难免也有所差异，十分有必要制定一个统一的日志打印规范。 规范日志打印主要有以下作用： 让系统运行状态更透明，提高线上故障排查效率。 减少代码风格差异，利于代码阅读和维护。 统一日志格式，利于外围工具（日志监控报警工具等）处理。 团队成员在研发过程中应该遵守该规范，文档内容可能会与你的喜好冲突，请尽量用包</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/vim-for-golang/</loc>
    
    <lastmod>2024-10-20T15:53:59.730Z</lastmod>
    
    <date>1602344600000</date>
    <title>Vim配置Go开发环境 | LeeYzero的博客</title>
    
    <desc>最近工作中使用Go开发比较多，而大部分工作都是使用vim完成，在配置vim的Go环境时，发现已经有很多现成的插件可用，对我而言，主要配置以下四个插件就够用了： vim-go: go语言的vim插件。支持代码格式化、语法检查、语法高亮、调试等非常多的功能。 tagbar: 用于方便查看代码结构。 nerdtree: 用于管理和查看代码目录结构。 YouCompleteMe: 用于代码自动补全。 依赖</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/01/24/redis-distribute-lock/</loc>
    
    <lastmod>2024-10-20T15:53:52.775Z</lastmod>
    
    <date>1611450654000</date>
    <title>基于Redis的分布式锁 | LeeYzero的博客</title>
    
    <desc>在计算机中，锁是用于解决资源竞争问题。在单机（单进程）环境下, 锁可以使用操作系统提供的同步原语实现。 但在分布式环境下，操作系统提供的同步原语就失效了, 需要一个分布式锁。其原理是需要一个分布式锁管理器[1]，提供进程级别访问共享资源的互斥性。本文主要讨论基于Redis实现的分布式锁。 分布式锁的使用场景Martin Kleppmann 在他的博客 How to do distributed l</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/05/05/talking-about-how-to-intervewing/</loc>
    
    <lastmod>2024-10-20T15:53:37.413Z</lastmod>
    
    <date>1620229847000</date>
    <title>谈谈如何面试候选人 | LeeYzero的博客</title>
    
    <desc>最近关于B站在北邮校园招聘时，面试官对候选人打压的事件在知乎上讨论的很激烈。我并不想讨论这些言论的真假，但从这件事件反映出了B站面试官的不专业性。本文结合自身的一些招聘经验，从面试官角度谈谈应该如何面试候选人。 人才标准每个公司或团队都有一个正式的或非正式的人才要求，即你想要雇用什么样的人？这是招聘的总体准则，这个准则因公司或团队而异，但可简单的概括为：聪明且会做事情的人。 聪明和会做事情的人并不</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/31/technical-writting-2/</loc>
    
    <lastmod>2024-10-20T15:52:42.160Z</lastmod>
    
    <date>1653961996000</date>
    <title>[译] Google技术写作（二） | LeeYzero的博客</title>
    
    <desc>本文翻译自 Google Technical Writing Courses，是Google推出的技术写作课程，该课程包含两个部分，本文是第二部分。 技术写作（一）：教你如何写出更清晰的技术文档，是学习第二部分的基础。 技术写作（二）：帮助你提升技术沟通技巧。</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/15/thinking-about-unittest/</loc>
    
    <lastmod>2024-10-20T15:52:39.799Z</lastmod>
    
    <date>1652605598000</date>
    <title>单元测试的实践与思考 | LeeYzero的博客</title>
    
    <desc>从个人经历过的多个团队中，发现有一个共性是：极少有团队注重单元测试。甚至当我想在团队中倡导单元测试时，有个研发经理跟我表达单元测试没有任何意义的结论。我不知道这是个人的不幸呢，还是整个中国互联网公司的现状如此？ 本文算是给单元测试”正名”，介绍单元测试的意义以及编写可测试代码的一些原则和思考。 什么是单元测试 单元测试是一段自动化的代码，这段代码调用被测试的工作单元，之后对这个单元的单个最终结果的</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/use-manifest-manage-deps/</loc>
    
    <lastmod>2024-10-20T15:52:03.027Z</lastmod>
    
    <date>1602341240000</date>
    <title>使用manifest管理应用程序的依赖文件 | LeeYzero的博客</title>
    
    <desc>我们在开发应用程序时，一般会引入一些第三方库，通常情况下，我们是把这些第三方依赖文件放到应用程序所处目录，这样应用程序启动时就能正确找到相关依赖文件。但当依赖文件比较多，我们希望对依赖的文件进行归类，放置到不同的目录下以便管理，这个时候应用程序的manifest就派上用场了。 并行程序集在介绍应用程序的manifest之前，需要了解一下并行程序集(Side-by-Side Assembly)。什么</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/04/18/trouble-shooting-for-request-cost-incr/</loc>
    
    <lastmod>2024-10-20T15:51:58.466Z</lastmod>
    
    <date>1618758120000</date>
    <title>记一次接口耗时上涨故障排查 | LeeYzero的博客</title>
    
    <desc>最近排查一个线上接口耗时上涨的问题，其中用到排查思路和相关工具有一定借鉴作用，在此做个记录,同时供网友参考。由于涉及到一些敏感信息，所以本文会对一些名称进行模糊化。 现象监控发现对外接口的整体耗时上涨了近100ms，涨了近50%，甚至有少部分接口出现超时现象，已经影响到部分业务的用户体验。 分析宏观分析对比故障发生的时候点，检查对应时间结点是否内部服务有上线，通常情况下，90%以上的故障都是由上线</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/vim-tutorial/</loc>
    
    <lastmod>2024-10-20T15:51:46.626Z</lastmod>
    
    <date>1602344326000</date>
    <title>Vim简明教程 | LeeYzero的博客</title>
    
    <desc>相对于IDE，vim的学习成本较高，但一旦熟悉vim后，开发效率是非常高的。vim的命令非常多，但在工作中常用的却比较少，本着实用主义，参考Learn Vim Progressively，整理最有用的命令，也便自己以后查阅。下面涉及到ctrl键的组合操作，如ctrl和r组合，用&lt;C-r&gt;表示 模式vim有三种模式：普通（normal）模式、插入（insert）模式和命令（command</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/09/vim-config-without-plugin/</loc>
    
    <lastmod>2024-10-20T15:50:47.471Z</lastmod>
    
    <date>1602255656000</date>
    <title>Vim无插件配置 | LeeYzero的博客</title>
    
    <desc>vim是unix下一款非常强大的文本编辑器。vim本身支持很多个性化的配置，根据自身需求，合理的配置vim，能够很好的提高开发效率。本文介绍vim下无插件的常用配置，关于配置vim有一个非常重要的原则就是：不要将你不明白的配置项写到配置文件中。 准备环境首先需要安装vim，目前大部分类unix系统默认都已经安装好了。如果没有安装，通常可以用系统的包管理功能进行安装，如centos下使用yum安装。</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/11/24/understanding-skip-list/</loc>
    
    <lastmod>2024-10-20T15:50:19.011Z</lastmod>
    
    <date>1669257710000</date>
    <title>[论文解读] Skip Lists: A Probabilistic Alternative to Balanced Trees | LeeYzero的博客</title>
    
    <desc>写在前面跳跃表是一种可以替代平衡树的数据结构。跳跃表采用概率上的平衡而不是强制要求节点的平衡，使得其在插入和删除时更容易实现，而且具有更好的效率。由于跳跃表具有良好的性能和算法实现的简单性，被广泛应用于工程实践中，如redis、leveldb等。 本文是对William Pugh的论文Skip Lists: A Probabilistic Alternative to Balanced Trees</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/02/01/timezones-touble-analysis/</loc>
    
    <lastmod>2024-10-20T15:49:44.756Z</lastmod>
    
    <date>1612111545000</date>
    <title>记一次时区问题引发的故障 | LeeYzero的博客</title>
    
    <desc>周末大清早就被报警短信吵醒，故障表现为离线存储集群流量突增，集中在热点分片，而且流量越来越大，系统吞吐、稳定性均在降低。最终发现是因为实例间时区不一致触发一个隐藏的BUG导致。这个问题在分布式系统中很具有代表性，在此做个记录以备忘。 症状 离线存储集群流量突增，集中在热点分片； 消息系统中消息在持续积压； 消息系统收到大量重复ACK； 业务worker消费到大量重复的消息；</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/windows-message-architecture/</loc>
    
    <lastmod>2024-10-20T15:48:28.262Z</lastmod>
    
    <date>1602341841000</date>
    <title>[译] Windows消息体系 | LeeYzero的博客</title>
    
    <desc>原文出自：Windows Messaging Architecture Most of the fresh software engineers and .NET developers may not know what really happens inside the Windows operating system when they implement and run a Windows </desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/04/24/trouble-shooting-for-serivce-hang/</loc>
    
    <lastmod>2024-10-20T15:47:56.084Z</lastmod>
    
    <date>1619237582000</date>
    <title>记一次服务hang死故障排查 | LeeYzero的博客</title>
    
    <desc>之前排查了一个服务hang死的线上故障，觉得这个问题比较有代表性，本文记录故障排查的经过，并做一些总结和思考。 现象周末线上一个比较核心的服务（以下称为X服务）出现大量5xx报警。从客户端看到的现象是客户端请求X服务时，出现大量的链接被重置（connection reset by peer）的错误。 分析从经验来看，90%以上的问题都是上线引入的。故障出现在周末，按规范来说，非特殊情况下，周末是不</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/write-readable-code/</loc>
    
    <lastmod>2024-10-20T15:43:15.604Z</lastmod>
    
    <date>1602343926000</date>
    <title>编写可读代码的艺术 | LeeYzero的博客</title>
    
    <desc>最近花了一个周的零星时间，看了《编写可读代码艺术》，收获颇多。虽然平时也经常使用书中提到的一些方法编写代码，但只是一种直观感觉认为这种方式是“正确”的。书中将这些方法提炼成一条条原则，并采用大量实例佐证这些原则。书中系统化的介绍了如何编写可读代码，并提出很多指导性原则，整本书不到200页，非常值得阅读。 基本原则何为好代码，何为坏代码，每个人的判断标准可能并不一样，但作者提了总的指导原则：代码应当</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/02/20/mr-impl/</loc>
    
    <lastmod>2024-10-20T15:38:46.415Z</lastmod>
    
    <date>1645323245000</date>
    <title>6.824 lab1-mapreduce | LeeYzero的博客</title>
    
    <desc>写在前面之前虽然看过很多分布式系统相关的书籍、论文和一些开源项目，但很少自己动手去实现。理论跟工程实现通常有非常大的差别，一个看似很简单的协议，在工程实现上可能非常困难。6.824是MIT开设的分布式系统课程，非常系统的讲解了分布式系统的主流技术，同时将理论和实践相结合，是一个非常好的课程。 本文是笔者在学习6.824 lec1课程的一些总结和思考，算是一个学习笔记。在看这篇文章之前，我希望读者先</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/06/go-concurrency-in-action-md/</loc>
    
    <lastmod>2024-10-20T15:38:46.414Z</lastmod>
    
    <date>1651839861000</date>
    <title>Go并发编程实践 | LeeYzero的博客</title>
    
    <desc>写在前面之前写过一篇Go并发编程模式，相对比较片面。最近系统看了下Concurrency in Go, 结合自身的一些实践，形成本文，算是一个读书笔记吧。 为什么需要并发？摩尔定律逐渐失效，数据规模的不断增长需要充分挖掘多核计算机性能，而并发编程是利器： Concurrency is the next major revolution in how we write software. ——The</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/about/index.html</loc>
    
    <lastmod>2024-10-20T06:53:41.634Z</lastmod>
    
    <date>1602153624000</date>
    <title>关于作者 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/cef-windows-bin/</loc>
    
    <lastmod>2024-10-20T06:43:46.402Z</lastmod>
    
    <date>1602340469000</date>
    <title>CEF Windows环境二进制发布 | LeeYzero的博客</title>
    
    <desc>CEF(The Chromium Embedded Framework) 是Marshall Greenblatt于2008年基于 Google Chromium 项目创建由BSD开源协议授权的开源项目。它和Chromium项目不同之处在于，Chromium项目侧重于Google Chrome应用开发，而CEF侧重于使浏览器更容易内嵌到第三方应用中。CEF屏蔽了Chromium和 Blink代码的</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/04/27/vscode-go-debugging/</loc>
    
    <lastmod>2024-10-20T06:43:32.558Z</lastmod>
    
    <date>1714207447000</date>
    <title>vscode-go调试工具 | LeeYzero的博客</title>
    
    <desc>工欲善其事，必先利其器。作为一个曾经的资深vim党，在使用过CodeServer后，基本上不再使用vim了。CodeServer作为vscode的云端IDE，再也不用搭建本地开发环境了。之前介绍了 CentOS搭建CodeServer环境，只需要几步，就可以搭建自己的云端IDE，非常方便。 vscode-go是vscode中针对Go语言的扩展，提供了丰富的特性，包括： 智能感知（IntelliSe</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/osx-config-lrzsz/</loc>
    
    <lastmod>2024-10-20T06:43:18.176Z</lastmod>
    
    <date>1602343243000</date>
    <title>MacOS下使用lrzsz传输文件 | LeeYzero的博客</title>
    
    <desc>在mac环境下，我们经常会使用iTerm2终端连接远程服务器，也经常会有本机和远程服务器之间进行文件共享的需求。这个时候lrzsz就派上用场了。 lrzsz是unix下的开源软件包，支持XMODEM, YMODEM ZMODEM文件传输协议。本文将会展示如何将lrzsz集成到iTerm2终端中，通过sz和rz命令和远程服务器传输文件。 其中，s表示send，r表示recieve，z表示使用的协议为</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/08/07/macos-terminal-configuration/</loc>
    
    <lastmod>2024-10-20T06:43:14.644Z</lastmod>
    
    <date>1659886240000</date>
    <title>配置macOS终端环境 | LeeYzero的博客</title>
    
    <desc>最近换了一台mac，配置了一下终端（terminal）环境，在此记录一下，以便后续查阅，同时给分享给网友作为参考。本文不会细无具细，只会列举出主要步骤和相关配置参考资料。主要包括以下四个部分： 安装 iTerm2 安装 oh-my-zsh 配置 powerlevel10k 配置插件 终端效果:</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/09/hello-world/</loc>
    
    <lastmod>2024-10-20T06:43:07.413Z</lastmod>
    
    <date>1602255634000</date>
    <title>Hello World | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/11/26/free-certificates-for-https/</loc>
    
    <lastmod>2024-10-20T06:42:59.382Z</lastmod>
    
    <date>1669443805000</date>
    <title>免费让网站启用HTTPS | LeeYzero的博客</title>
    
    <desc>之前搭建了一个 codeserver 的开发环境，但还遗留了配置HTTPS访问域名的问题。本周正好有空搞下，本来打算花钱买一个HTTPS证书，发现 Let’s Encrypt 提供了免费的HTTPS证书，而且还提供了配套的工具让网站开启HTTPS变得非常简单，本文记录下安装步骤。 在介绍安装步骤之前先简单介绍一下 HTTPS 的工作原理，不感兴趣的同学可以直接跳过。 简单来说，HTTPS 就是安全</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/04/14/deploy-php-on-centos/</loc>
    
    <lastmod>2024-10-20T06:42:54.427Z</lastmod>
    
    <date>1713079084000</date>
    <title>CentOS搭建Nginx+PHP环境 | LeeYzero的博客</title>
    
    <desc>虽然PHP做业务后端逐步在被Go等语言替代，但使用PHP做简单业务封装和数据组装时，开发效率依然是比较高效的。使用Nginx运行PHP的常用方法是FastCGI模块。PHP-FPM (FastCGI进程管理器）极大地提高了你的Nginx+PHP环境的性能，所以这对高负载的网站很有用。本教程介绍在CentOS8上安装Nginx并配置PHP-FPM的步骤，以便后续参考。 依赖环境 CentOS8 拥有</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/04/02/deploy-hexo-on-centos/</loc>
    
    <lastmod>2024-10-20T06:42:49.548Z</lastmod>
    
    <date>1617354031000</date>
    <title>搭建Hexo环境 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/08/deploy-codeserver-on-centos/</loc>
    
    <lastmod>2024-10-20T06:42:44.868Z</lastmod>
    
    <date>1652016020000</date>
    <title>CentOS搭建CodeServer环境 | LeeYzero的博客</title>
    
    <desc>Code Server是一个基于VSCode实现的开源的云端IDE，只要能联网，就可以通过浏览器进行访问，无需安装，十分方便。本文主要介绍如何在CentOS 8中安装Code Server。 依赖环境 2GB RAM 需要root权限，对于非root账号，需要sudo权限 需要安装nginx</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/01/10/charles-tutorial/</loc>
    
    <lastmod>2024-10-20T06:42:39.568Z</lastmod>
    
    <date>1704898640000</date>
    <title>Charles简明教程 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/10/06/software-design-philosophy/</loc>
    
    <lastmod>2024-10-20T06:40:57.397Z</lastmod>
    
    <date>1728210873000</date>
    <title>软件设计哲学 | LeeYzero的博客</title>
    
    <desc>最近本来想写一篇如何应对复杂系统的文章，偶然读到John Ousterhout的软件设计哲学，读完后，发现我没有必要再写了。这篇文章对原文做一个概要性总结并谈谈自己的理解和思考。 对于一个软件系统，需求可以粗略的分为两类： 功能性需求 非功能性需求 功能性需求是面向用户的，非功能性需求是面向系统的，但非功能性需求最终是服务于功能性需求。我们通常会用非功能性需求去评估一个系统的质量，比如扩展性、维护</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/09/13/time-clock-ordering-events-in-distributed-system/</loc>
    
    <lastmod>2024-10-20T06:36:52.336Z</lastmod>
    
    <date>1726204254000</date>
    <title>分布式系统中的时间、时钟以及事件顺序 | LeeYzero的博客</title>
    
    <desc>Leslie Lamport 在1978年发表了一篇论文Time, Clocks, and the Ordering of Events in a Distributed System，对分布式系统领域产生的深远影响，这篇论文也成为分布系统领域引用最高的文献之一。 论文中定义了分布式系统中事件的”happen before”关系，并引入了逻辑时钟解决分布式系统中事件同步的问题。但由于系统之外的信息</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/14/mit-6-824-lab2d-log-compaction/</loc>
    
    <lastmod>2024-10-20T06:35:56.943Z</lastmod>
    
    <date>1670980209000</date>
    <title>MIT 6.824 Lab2C: 日志压缩 | LeeYzero的博客</title>
    
    <desc>上一篇 Lab2C: 持久化 中介绍了Raft持久化的实现，本篇介绍Raft日志压缩原理和实现。实验二共包含四个子实验： Lab2A: 选主 Lab2B: 日志复制 Lab2C: 持久化 Lab2D: 日志压缩 本文是第四个子实验，需要实现Raft日志压缩，在开始实验前，先阅读以下材料： 阅读论文：In Search of an Understandable Consensus Algorithm</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/14/mit-6-824-lab2c-persistence/</loc>
    
    <lastmod>2024-10-20T06:35:54.682Z</lastmod>
    
    <date>1670980185000</date>
    <title>MIT 6.824 Lab2C: 持久化 | LeeYzero的博客</title>
    
    <desc>上一篇 Lab2B: 日志复制 中介绍了Raft日志复制的实现，本篇介绍Raft持久化的原理和实现。实验二共包含四个子实验： Lab2A: 选主 Lab2B: 日志复制 Lab2C: 持久化 Lab2D: 日志压缩 本文是第三个子实验，需要实现Raft持久化。持久化是指将Raft的部分状态存储到非易失的存储介质中，这样即便节点崩溃，也不至于丢失数据，当服务恢复后，可以从之前持久化的状态处开始工作。</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/14/mit-6-824-lab2b-log-replication/</loc>
    
    <lastmod>2024-10-20T06:35:51.461Z</lastmod>
    
    <date>1670980163000</date>
    <title>MIT 6.824 Lab2A: 日志复制 | LeeYzero的博客</title>
    
    <desc>上一篇 Lab2A: 选主 中介绍了Raft选主的实现，本篇介绍Raft日志复制的原理和实现。实验二共包含四个子实验： Lab2A: 选主 Lab2B: 日志复制 Lab2C: 持久化 Lab2D: 日志压缩 本文是第二个子实验，需要实现Raft日志复制。由于Raft的强领导人特性，命令都是通过Leader顺序追回到日志中，然后通过Leader复制到各Follower中，由于Raft的日志安全特性</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/14/mit-6-824-lab2a-leader-election/</loc>
    
    <lastmod>2024-10-20T06:35:49.042Z</lastmod>
    
    <date>1670980125000</date>
    <title>MIT 6.824 Lab2A: 选主 | LeeYzero的博客</title>
    
    <desc>上一篇 Lab2: 概述 中简要介绍了Raft，本篇介绍Raft选主的原理和实现。实验二共包含四个子实验： Lab2A: 选主 Lab2B: 日志复制 Lab2C: 持久化 Lab2D: 日志压缩 本文是第一个子实验，需要实现Raft选主。Raft具有强领导人特性，也就是说Raft需要先选举出领导人后才能进行后续操作。在开始实验前，先阅读以下材料： 阅读论文：In Search of an Und</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/14/mit-6-824-lab2-overview/</loc>
    
    <lastmod>2024-10-20T06:35:46.251Z</lastmod>
    
    <date>1670980055000</date>
    <title>MIT 6.824 Lab2: 概述 | LeeYzero的博客</title>
    
    <desc>6.824 是MIT推出的一个分布式系统课程，讲师是大名鼎鼎的Robert Tappan Morris。Lab2 是课程中的第二个实验，实验要求需要用Go语言实现Raft。Raft是为可理解而设计的共识算法（consensus algorithm），它在性能和容错性上等价于Paxos，但结构却完全不一样。Raft通过减少状态空间和将问题分解为几个独立的子问题，使得Raft更容易理解，也更利于工程实</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/02/20/mit-6-824-lab1-mapreduce/</loc>
    
    <lastmod>2024-10-20T06:35:40.720Z</lastmod>
    
    <date>1645323245000</date>
    <title>MIT 6.824 Lab1: MapReduce | LeeYzero的博客</title>
    
    <desc>之前虽然看过很多分布式系统相关的书籍、论文和一些开源项目，但很少自己动手去实现。理论跟工程实现通常有非常大的差别，一个看似很简单的协议，在工程实现上可能非常困难。6.824是MIT开设的分布式系统课程，非常系统的讲解了分布式系统的主流技术，同时将理论和实践相结合，是一个非常好的课程。 本文是笔者在学习6.824 lec1课程的一些总结和思考，算是一个学习笔记。在看这篇文章之前，我希望读者先提前阅读</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/11/28/upload-multi-files-with-go/</loc>
    
    <lastmod>2024-10-20T06:24:42.806Z</lastmod>
    
    <date>1638073224000</date>
    <title>使用Go实现批量文件上传 | LeeYzero的博客</title>
    
    <desc>在现在生活中，我们经常在使用文件上传功能，但我们很少会自己去做一个文件上传的服务，了解文件的上传原理有助于我们开发出更健壮的程序。利用Go语言以及其标准库的能力，用很少的代码量就可以实现一个文件上传服务器。本文以小工具的方式讲解如何实现一个简单的文件上传服务器，并假设读者对Go、HTTP、HTML有一定了解。 完整代码参考：github.com/leeyzero/go-tools/uploadse</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/11/28/understanding-rest-architecture-1/</loc>
    
    <lastmod>2024-10-20T06:23:49.152Z</lastmod>
    
    <date>1669604075000</date>
    <title>[论文解读] Architectural Styles and the Design of Network-based Software Architectures - Part1 | LeeYzero的博客</title>
    
    <desc>Architectural Styles and the Design of Network-based Software Architectures（架构风格与基于网络应用软件的架构设计）是 Roy Fielding 在2000年发表的博士论文。这篇论文一经发表，就引起了关注，并且对互联网开发产生了深远的影响。论文中首次提出的REST架构风格基本上成为目前Web架构的指导规范，如果一个Web架构</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/04/06/thinking-about-solving-complicated-problem/</loc>
    
    <lastmod>2024-10-20T06:19:53.230Z</lastmod>
    
    <date>1712374099000</date>
    <title>解决复杂问题的一些思考 | LeeYzero的博客</title>
    
    <desc>最近半年主要在对一个10余年的商业化系统进行重构。对于商业化系统来讲，普遍存在状态多、链路长、业务逻辑复杂等特点。加上系统设计之初并未考虑到后续业务的发展形态，在承接业务需求时，不断打补丁，存在很多ad hoc方案，系统最终变成了一个”大泥球“，导致的问题是业务迭代效率低，代码变更故障率高。这篇文章主要对如何解决复杂问题谈谈自己的一些思考，供大家参考。 思考框架首先谈谈什么是复杂问题。复杂问题是一</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/05/26/regex-tutorial/</loc>
    
    <lastmod>2024-10-20T06:16:10.359Z</lastmod>
    
    <date>1716736580000</date>
    <title>正则表达式简明教程 | LeeYzero的博客</title>
    
    <desc>有些人在碰到问题时，就想：“我知道，我可以使用正则表达式。”现在，他们就有了两个问题。– by Jamie “jwz” Zawinski， 1997年 8月 什么是正则表达式正则表达式（Regular Expression），通常缩写为regex或regexp，是一种在文本中进行搜索和替换的模式描述语言。它使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。正则表达式是由普通字符（例如：字母</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/09/21/oauth2-intro/</loc>
    
    <lastmod>2024-10-20T06:13:39.231Z</lastmod>
    
    <date>1632237352000</date>
    <title>OAuth2简明教程 | LeeYzero的博客</title>
    
    <desc>开放授权（OAuth, Open Authorization）是一个开放标准，允许用户让第三方应用访问该用户在某一网站上存储的私密的资源（如照片，视频，联系人列表等），而无需将用户名的密码提供给第三方应用。OAuth2.0是OAuth的2.0版本。本文主要介绍OAuth2的授权流程。 名词解释 Resource Owner：资源拥有者 Resource Server：资源服务器 Client：客户</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/04/17/go-json-unmarshal-loss-precision-2/</loc>
    
    <lastmod>2024-10-20T06:04:37.599Z</lastmod>
    
    <date>1713368246000</date>
    <title>Go json.Unmarshal 精度丢失问题分析（2/2） | LeeYzero的博客</title>
    
    <desc>缘起最近出现一例json.Unmarshal导致的精度丢失引发的线上问题，虽然这个问题在被及时发现，未对业务造成损失，但细挖这个问题的原因仍然比较有意思。这篇文章会从技术层面深入分析json.Unmarshal精度丢失的原因以及处理建议，以避免后续开发过程中再次踩坑。 在 Part1 中，我们着重说明了json.Unmarshal处理大整数可能出现精度丢失的问题，但遗留了一个问题，即大整数置换成浮</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2024/04/16/go-json-unmarshal-loss-precision-1/</loc>
    
    <lastmod>2024-10-20T06:04:32.871Z</lastmod>
    
    <date>1713281846000</date>
    <title>Go json.Unmarshal 精度丢失问题分析（1/2） | LeeYzero的博客</title>
    
    <desc>缘起最近出现一例json.Unmarshal导致的精度丢失引发的线上问题，虽然这个问题在被及时发现，未对业务造成损失，但细挖这个问题的原因仍然比较有意思。这篇文章会从技术层面深入分析json.Unmarshal精度丢失的原因以及处理建议，以避免后续开发过程中再次踩坑。 在分析这个问题的过程中，发现涉及Go对浮点数数值的处理，又涉及IEEE-745标准中的一些细节，放在一篇文章中会增大文章的阅读难度</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2023/01/08/go-data-structure-string/</loc>
    
    <lastmod>2024-10-20T06:04:21.382Z</lastmod>
    
    <date>1673181314000</date>
    <title>Go数据结构之string | LeeYzero的博客</title>
    
    <desc>在Go语言中，string是一种非常重要的数据结构。了解string的内部实现原理，有利于我们写出更高效的代码。本篇文章首先介绍string的实现原理，然后介绍string、bytes、runes和characters之间的关系，同时引出字符篇码Unicode和UTF-8，最后介绍使用string应该注意的一些问题。 先来看下面两个例子。 示例一 1234str := &quot;中文abc&qu</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/12/25/go-data-structure-slice/</loc>
    
    <lastmod>2024-10-20T06:04:17.340Z</lastmod>
    
    <date>1671962514000</date>
    <title>Go数据结构之slice | LeeYzero的博客</title>
    
    <desc>在Go语言中，slice是一种非常重要的数据结构，用于描述数组存储的连续部分，它本质上是对数组的引用。slice是建立在数组基础上，是对数组的一种封装，它屏蔽了数组底层细节，但使用起来更方便、灵活，再配合内建函数append和copy使得slice具有更强的表现力。 如果不了解slice的内部实现原理，可能会写出低效的代码，甚至会写出一些让你意想不到的BUG。本文先介绍slice的实现原理，再介绍</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2023/02/13/go-data-structure-map/</loc>
    
    <lastmod>2024-10-20T06:04:13.915Z</lastmod>
    
    <date>1676301576000</date>
    <title>Go数据结构之map | LeeYzero的博客</title>
    
    <desc>map又称映射表或关联数组，是一种常用的数据结构。它由一组&lt;key, value&gt;组成，每个key只出现一次。Go语言原生支持了map数据结构，正如 Go maps in action 中所说： One of the most useful data structures in computer science is the hash table. Many hash table im</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2023/01/20/go-data-structure-interface/</loc>
    
    <lastmod>2024-10-20T06:04:02.492Z</lastmod>
    
    <date>1674201540000</date>
    <title>Go数据结构之interface | LeeYzero的博客</title>
    
    <desc>今年最后一天上班，下午没啥事，总结下Go语言的接口。接口是Go语言区别与其它语言的重要语言特性，也是我最喜欢的Go语言特性之一。Go的接口除了提供多态的能力外，它还是Go反射的基础。Go是一门静态语言，Go接口能够在编译期检查语法规则，同时具备像动态语言那样使用 ducking typing 实现接口。 我一直比较好奇Go的接口内部是如何实现。看了几篇文章，也看了runtime包中的部分实现。发现</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2022/05/06/go-concurrency-in-action/</loc>
    
    <lastmod>2024-10-20T06:02:14.318Z</lastmod>
    
    <date>1651839861000</date>
    <title>Go并发编程实践 | LeeYzero的博客</title>
    
    <desc>写在前面之前写过一篇Go并发编程模式，相对比较片面。最近系统看了下Concurrency in Go, 结合自身的一些实践，形成本文，算是一个读书笔记吧。 为什么需要并发 Concurrency is the next major revolution in how we write software. —— The Free Lunch Is Over 摘自 Herb Sutter 2005年在</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/07/02/go-concurrency-pattern/</loc>
    
    <lastmod>2024-10-20T06:01:29.827Z</lastmod>
    
    <date>1625240311000</date>
    <title>Go并发编程模式 | LeeYzero的博客</title>
    
    <desc>简介并发是Go语言最重要的语言特性之一，是Go语言区别于其它语言的重要特征。Go语言原生支持并发，可以充分发挥多核CPU的机器性能，同时在语言层面上，Go以十分简洁的语法提供丰富的并发能力，让并发编程并得简单。本文总结Go语言并发编程的常用模式，模式也就是我们说的套路，先学会模仿，再学会融汇贯通，最后才能创造出新的模式，这就是所谓的无招胜有招吧。 Go对并发的支持对于桌面客户端应用程序，为了提升客</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2020/10/10/exception-and-crash/</loc>
    
    <lastmod>2024-10-20T06:00:24.110Z</lastmod>
    
    <date>1602339182000</date>
    <title>应用程序异常处理与崩溃收集 | LeeYzero的博客</title>
    
    <desc>对于Windows应用, 当应用发布出去之后，如果应用程序在用户机器上发生了崩溃，我们需要这样一种手段，即在程序崩溃的瞬间能够“记录”下崩溃时进程、线程、栈、栈上下文等信息，这些信息对我们分析崩溃原因非常有帮助。另外，由于客户端程序一般是运行在用户的机器上，当生成崩溃信息后，还需要将这些信息上报至服务器，以方便开发者能够快捷地拿到这些崩溃信息进行分析。一般来说客户端程序崩溃的收集与处理流程如下图：</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/06/08/end-to-end-principle/</loc>
    
    <lastmod>2024-10-20T05:53:27.892Z</lastmod>
    
    <date>1623085277000</date>
    <title>端到端设计原则 | LeeYzero的博客</title>
    
    <desc>最近又看了一遍 End-To-End Argument In System Design，有一些新的思考，但都集中在一些点上，不够系统，在此先记录下来，后续有新的想法再做补充和整理。 核心观点这篇论文在由MIT计算机科学实验室发表于1984年，是一篇非常经典的关于系统设计的论文。论文论证了分布式系统设计的一个事实：端到端的可靠通信只能由通信的两端（End-Point）来保证，而中间的媒介（如消息中</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2021/01/28/cpp-raii/</loc>
    
    <lastmod>2024-10-20T05:45:52.160Z</lastmod>
    
    <date>1611764411000</date>
    <title>C++资源管理 | LeeYzero的博客</title>
    
    <desc>RAII作为C++资源管理的一种惯用法，是每一位C++程序员都应该掌握的基本技能。在google上搜索关键字RAII, 有二百多万条搜索结果。说明这个话题在网上已经被讨论过无数次，也发现了一些好文章给我不少启发，这篇文章主要是做个总结并谈谈自己的理解。 什么是RAII资源获取即初始化（Resource Acquisition Is Initialization），即RAII。RAII是一种C++编</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/2023/02/18/go-data-structure-channel/</loc>
    
    <lastmod>2023-02-19T16:11:11.000Z</lastmod>
    
    <date>1676710422000</date>
    <title>Go数据结构之channel | LeeYzero的博客</title>
    
    <desc>channel是一种数据结构，在Go语言中用于协程间通信，是Go语言区别于其它语言的重要特性。Go语言原生支持channel，配合Go语言原生对并发的支持，让并发编程变得简单。正如Share Memory By Communicating对Go并发编程的建议： Do not communicate by sharing memory; instead, share memory by commun</desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/categories/index.html</loc>
    
    <lastmod>2021-04-02T07:41:11.000Z</lastmod>
    
    <date>1602153539000</date>
    <title>分类 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
  <url>
    <loc>https://leeyzero.github.io/tags/index.html</loc>
    
    <lastmod>2021-04-02T07:41:11.000Z</lastmod>
    
    <date>1602153084000</date>
    <title>标签 | LeeYzero的博客</title>
    
    <desc></desc>
  </url>
  
</urlset>
